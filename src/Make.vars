# -*- makefile -*-

AM_CPPFLAGS = -DPKGDATADIR=\"$(pkgdatadir)\"
AM_CPPFLAGS += -DPKGLIBDIR=\"$(pkglibdir)\"
pkglocalstatedir = $(localstatedir)/$(PACKAGE)
AM_CPPFLAGS += -DPKGLOCALSTATEDIR=\"$(pkglocalstatedir)\"
pkgsysconfdir = $(sysconfdir)/$(PACKAGE)
AM_CPPFLAGS += -DPKGSYSCONFDIR=\"$(pkgsysconfdir)\"
AM_CPPFLAGS += -include $(top_builddir)/config.h

# Include paths.
AM_CPPFLAGS += -I $(top_srcdir)/src/include \
    -I$(top_srcdir)/src/coreapps/openflow/libofp \
    -I$(top_srcdir)/src/coreapps/openflow/libofp/include \
    -I$(top_srcdir)/src/coreapps/openflow/libofp/lib
# GNU C library definitions.
AM_CPPFLAGS += -D_GNU_SOURCE=1
if NDEBUG
AM_CPPFLAGS += -g -DNDEBUG
endif
if PROFILING
AM_CPPFLAGS += -DPROFILING
endif
AM_CPPFLAGS += -D_REENTRANT

# GNU C++ library definitions.
AM_CPPFLAGS += -D__STDC_LIMIT_MACROS=1
AM_CPPFLAGS += -D__STDC_FORMAT_MACROS=1
AM_CPPFLAGS += -D__STDC_CONSTANT_MACROS=1
if !NDEBUG
#AM_CPPFLAGS += -D_GLIBCXX_CONCEPT_CHECKS=1
AM_CPPFLAGS += -D_GLIBCXX_DEBUG=1
AM_CPPFLAGS += -D_GLIBCXX_DEBUG_PEDANTIC=1
endif

# Add Boost flags
AM_CPPFLAGS += $(BOOST_CPPFLAGS)

# Always enable frame pointers.  The benefits for debugging outweigh
# the costs.  (On x86-64 frame pointers are disabled by default, so
# we need this option.)
COMMON_FLAGS = -fno-omit-frame-pointer -fno-strict-aliasing
COMMON_FLAGS += -Wall -Wno-sign-compare -Winit-self -Wformat-nonliteral -Wformat-security

AM_CXXFLAGS = $(COMMON_FLAGS)

AM_CFLAGS = $(COMMON_FLAGS)
AM_CFLAGS += -Wstrict-prototypes
AM_CFLAGS += -Wmissing-prototypes

LDADD =

AM_LDFLAGS = -R$(pkglibdir)
if !NDEBUG
AM_LDFLAGS += -export-dynamic
endif
AM_LDFLAGS += $(BOOST_LDFLAGS)

#pkglib_SCRIPTS = $(NOX_RUNTIMEFILES)
BUILT_SOURCES  = 

# Runtime-files build and clean rules
nox-runtimefiles-build:
	@dlist="$(NOX_RUNTIMEFILES)";for f in $$dlist; do \
		if test -f ${srcdir}/$$f && test ! -f ${builddir}/$$f; then \
			echo "Soft-linking file: $(builddir)/$$f";\
			ln -sf $(srcdir)/$$f $(builddir)/$$f;\
		fi;\
	done;

nox-runtimefiles-clean:
	@dlist="$(NOX_RUNTIMEFILES)";for f in $$dlist; do \
		if test ! -f $(builddir)/$$f; then \
			echo "Removing soft-link: $(builddir)/$$f";\
			rm -f $(builddir)/$$f;\
		fi;\
	done;

# NOX rules for setting up links in remote build tree 
nox-all-local:
	@dlist="$(NOX_RUNTIMEFILES)";for f in $$dlist; do \
	  if test -f $(srcdir)/$$f && test ! -f $$f; then \
		ln -sf $(srcdir)/$$f $(builddir)/$$f;\
	  fi;\
	done;

# NOX clean rules 
nox-clean-local:
	@rm -f *.la *.so *.o

# NOX install rules
pkglibdir = $(subst src,$(bindir),$(subdir))
nox_installsubdir = $(DESTDIR)$(subst src,$(bindir),$(subdir))

nox-install-local:
	@if test -d $(srcdir)/templates; then\
		cp -rf -L $(srcdir)/templates $(nox_installsubdir)/templates;\
	fi;

test:
